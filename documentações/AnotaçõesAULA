Back End. - Marcelinho
•*´¨`*•...•*´¨`*•...•*´¨`*•...•*•*´¨`*•...•*´¨`*•...•*´¨`*•...•*

------------ 23/01

Banco de dados
→ Modelagem 
→ Scripts SQL
→ Recursos avançados de BD (view, proceveres, triggers)

API
→ GET, POST, PUT e DELETE

Documentação AP

 Endpoint
-No semestre passado: /Pizzas
-Agora:
nome do projeto junto com o endpoint: /Tonnypizzaria/Pizzas
(Vercionar os endpoints) → /v1/Tonnypizzaria/Pizzas

------------ 30/01

- colocar a abreviação do objeto
database: (nome) db_acme_filmes_turma_ab
tabela: (nome) tbl_filme
usar letras minusculas(usar o underscore)

MVC
Model - dados(Acesso ao banco de dados), maniula as classes na progrogramação orientada ao objeto. * As interações com o banco de dados nos colocamos na pasta DAO
View - interace do projeto
Controller - regra de negocios da aplicação (tratamento de dados - validação- converções de dados) * Separar por assunto 

Para realizar a conexão com o BD preicamo utiliazr uma dependencia:
- SEQUELIZE ORM Possui diversas vulnerabilidades (É antigo). x
- PRISMA    ORM Permite uma melhor interação com o banco    ✔
- FASTFY    ORM                                             ✔

Para utilizar o prisma precisamos instalr as seguintes dependencias
 Prisma instalação: npm install prisma --save (Na pasta raiz - APP)
 Prisma:            npm install @prisma/client --save
 * Apos a instalação dos prisma devemos rodar o coamndo abaixo para inicializar o prisma:
 Prisma:            npx prisma init

------------ 06/02

//Endpoint 1<<<<<<<<<<<<
// app.get('/v1/AcmeFilmes/filmes', cors(), async function(request, response, next){
//     let controleFIlmes = require('./controller/funcoes')
//     let listaFilmes = controleFIlmes.getListaDeFilmes();

//     if(listaFilmes){
//         response.json(listaFilmes)
//         response.status(200)

//     }else
//         response.status(400)
// }); 


------------ 27/02
Criação dos post


get  | retorna dados
post | insere dados novos
put  | atualiza dados existentes

